/*global __dirname, require, exports */
var fileSystem = require("fs"),
    path = require('path'),
    im = require('imagemagick'),
    FileUploadHandler = null,
    pathRegex = !!process.platform.match(/^win/) ? /([^\\]+$)/ : /([^\/]+$)/;


FileUploadHandler = function (options) {
    this.imageDir = options.imageDir;
    this.maxWidth = options.maxWidth;
    this.maxHeight = options.maxHeight;
};

FileUploadHandler.create = function (options) {
    return new FileUploadHandler(options);
};

/*
 * Handle file upload
 */
FileUploadHandler.prototype = {
    writeFile : function (file, error, success) {
        var that = this,
            filePath = path.join(__dirname, this.imageDir, file.name),
            readStream = fileSystem.createReadStream(file._writeStream.path),
            writeStream = fileSystem.createWriteStream(filePath);

        writeStream.on('error', function (e) {
            console.log("Error writing file");
            if (error) {
                error(e);
            }
        });

        readStream.on('data', function (data) {
            writeStream.write(data);
            console.log("writing data");
        });

        readStream.on('close', function () {
            writeStream.end();
            console.log("Finished reading");
            that.createEditedImage(file.name, filePath, success);
        });

    },

    // TODO: move this to the success handler of the readStream.on('close')
    // method, so the file upload handler stays independent of images
    createEditedImage : function (fileName, filePath, success) {
        var that = this,
            editedPath = filePath.replace(pathRegex, 'edited' + path.sep + fileName);

        console.log("trying to resize " + filePath + " to " + editedPath);
        im.resize({
            srcPath : filePath,
            dstPath : editedPath,
            width : this.maxWidth,
            height : this.maxHeight
        }, function (err, stdout) {
            if (err) {
                throw err;
            }
            else {
                console.log('resized image created: ' + editedPath);
                that.createThumbImage(fileName, filePath, success);
            }
        });

    },

    createThumbImage : function (fileName, filePath, success) {
        var thumbPath = filePath.replace(pathRegex, 'thumb' + path.sep + fileName);
        console.log("trying to resize " + filePath + " to " + thumbPath);
        im.resize({
            srcPath : filePath,
            dstPath : thumbPath,
            width : 150,
            height : 150
        }, function (err, stdout) {
            if (err) {
                throw err;
            }
            else {
                console.log('thumb image created: ' + thumbPath);
                if (success) {
                    success({
                        name : fileName
                    });
                }
            }
        });
    }
};

exports.FileUploadHandler = FileUploadHandler;
