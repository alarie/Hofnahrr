var Resource = require('deployd/lib/resource'), 
    util = require('util'),
    http = require('http');

function ReverseProxy (options) {
    Resource.apply(this, arguments);
}

ReverseProxy.label = 'ReverseProxy';
ReverseProxy.defaultPath = '/reverse-proxy';


util.inherits(ReverseProxy, Resource);

ReverseProxy.basicDashboard = {
    settings: [{
        name: 'access-allow-orign-header',
        type: 'text',
        description: 'Origins that are allowed'
    }]
};

ReverseProxy.prototype.handle = function (ctx, next) {
    var req = ctx.req,
        res = ctx.res;

    if (req) {
        res.setHeader('Access-Control-Allow-Origin', this.config['access-allow-origin-header'] || '*');
        res.setHeader('Access-Control-Allow-Credentials', true);
        res.setHeader('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'origin, content-type');

        if (req.method === 'OPTIONS') {
            ctx.done(null, '');
        }
        else {
            var url = ctx.query.url,
                parts = /([^:]+:\/\/)?([^\/]+)(\/.*)?$/g.exec(url),
                options = {
                    hostname : parts[2],
                    port : 80,
                    path : parts[3],
                    method : req.method
                },
                req2;

            console.log(options);
            req2 = http.request(options, function (res2) {
                var data ='';
                res2.setEncoding('utf8');
                res2.on('data', function (chunk) {
                    data += chunk;
                });
                res2.on('end', function () {
                    ctx.done(null, data);
                });
            });

            req2.on('error', function (e) {
                ctx.done('error', e);
            });

            req2.setHeader('User-Agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.91 Safari/537.11');

            req2.end();
        }
    }
};

module.exports = ReverseProxy;
